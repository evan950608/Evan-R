}
a
b
cnt
tem
tmp
x = c()
x.append('c')
x[-1] = 'c'
x
x[0] = 'c'
x
x[1] = 'c'
x
x[2] = 'd'
x
v = c()
class(v)
v = character()
class(v)
help('append')
append(v, 'a')
v
v = character()
append(v, 'a', after = length(x))
v
v = c(1)
append(v, 2)
v
v = append(v, 2)
v
f_nums = c(1, 1)
for (i in 3:100) {
f_nums = append(f_nums, f_nums[i-2] + f_nums[i-1])
}
f_nums
class(f_nums)
class(1)
class(1.0)
f_nums = numeric(1, 1)
for (i in 3:100) {
f_nums = append(f_nums, f_nums[i-2] + f_nums[i-1])
}
f_nums
a = integer(1,2,3)
integer(4,5)
integer(5.4)
integer(c(4.5, 2.3))
typeof(1)
typeof(3.2)
typeof('asdf')
typeof('12')
as.integer(3.4)
f_nums = as.integer(c(1, 1))
for (i in 3:100) {
f_nums = append(f_nums, f_nums[i-2] + f_nums[i-1])
}
f_nums
f_nums = c(1, 1)
for (i in 3:100) {
f_nums = append(f_nums, f_nums[i-2] + f_nums[i-1])
}
as.integer(f_nums)
f_nums = c(1, 1)
for (i in 3:10) {
f_nums = append(f_nums, f_nums[i-2] + f_nums[i-1])
}
as.integer(f_nums)
a = 1
b = 1
cnt = 2
while(b < 100){
tmp = a + b
a = b
b = tmp
cnt = cnt + 1
}
cat('cnt: ', cnt, '\nb: ', b)
cat('A:', 1, 'B:', 2)
cat('A:', 1, '\nB:', 2)
data
# 4.1 Browse through your dataset
head(data)
str(data)
# 4.3 Selecting with subset function
pass_final <- subset(data, subset = final > 60)
pass_final
data[final >= 60, ]
data[data$final >= 60, ]
data[7:10]
data[7:10, ]
data[7:10, c(1, 3,6)]
data[7:10, c('name', 'hw2', 'final')]
data[, 2:4]
data[, c('hw1', 'hw2', 'hw3')]
# 4.4 Sorting with order function
pass_final <- pass_final[order(pass_final$final),]
pass_final
# Fibonacci Number
#Return the n(th) value in sequence
fibonacci = function(n) {
if (n==1 | n==2) {
return(1)
} else {
return(fibonacci(n-2) + fibonacci(n-1))
}
}
fibonacci(20)
for (i in 1:20) {
print(fibonacci(i))
}
builtins()
install.packages('dplyr')
dplyr
mean
install.packages('dplyr')
library(dplyr)
dplyr
require(dplyr)
dplyr
?lapply
a = c(1,2,3)
b = list(1,2,3)
a
b
class(a)
class(b)
typeof(a)
typeof(b)
c = list(a)
c
class(c)
typeof(c)
args(vapply)
help(vapply)
x <- 1:10
y <- list(a = -3:5, b = -2:8, c = 4:9)
y
list(-3:5, -2:8, 4:9)
list('a' = -3:5, 'b' = -2:8, 'c' = 4:9)
list(a = -3:5, -2:8, 4:9)
square <- function(x) {
return(x**2)
}
square_x <- list()
for (i in 1:length(x)){
square_x[[i]] <- square(x[i])
}
square_x
lapply(x, square)
lapply(x, function(x) {x**2})
lapply(y, mean)
y
pow <- function(x, p) {
return (x**p)
}
lapply(x, pow)
lapply(x, pow, p=3)
pow <- function(x, p=2) {
return (x**p)
}
lapply(x, pow)
# sapply
# Returns a vector
sapply(x, square)
sapply(y, mean)
args(sapply)
sapply(y, mean, USE.NAMES = FALSE)
sapply(y, mean, USE.NAMES = FALSE)
sapply(y, mean)
f <- function(x) {
return (c(min = min(x), mean = mean(x), max = max(x)))
}
c(a = 1, b = 2, c = 3)
d = c(a = 1, b = 2, c = 3)
d[a]
d$a
d[1]
d[b]
d['b']
d['a']
f <- function(x) {
return (c(min = min(x), mean = mean(x), max = max(x)))
}
lapply(y, f)
class(lapply(y, f))
sapply(y, f)
class(sapply(y, f)
)
vapply(y, f, numeric(3))
class(vapply(y, f, numeric(3))
)
# numeric serves as a 'template'
numeric(3)
logical(2)
for(i in 1:nrow(data)){
print(sprintf('%s\'s hw1 grade is: %d', data[i, 'name'], data[i,'hw1']))
#cat(data[i, 'name']'\'s', 'hw1 grade is:', data[i,'hw1'], '\n')
}
print('a', 1)
print(cat('a',1))
cat('a',1)
print(cat('a',1))
for (i in 0:10) {
cat('Numeric: ', numeric(i))
cat('Character: ', character(i))
cat('Logical: ', logical(i))
}
for (i in 0:10) {
cat('Numeric: ', numeric(i), '\n')
cat('Character: ', character(i), '\n')
cat('Logical: ', logical(i), '\n')
}
vapply(y, f, numeric(3))
vapply(y, f, numeric(0))
vapply(y, f, numeric(1))
vapply(y, f, numeric(2))
vapply(y, f, numeric(4))
vapply(y, f, numeric(0))
y1 <- function(x){
return (x+3)
}
y1(5)
y2 <- function(x, y, z){
return (x+y+z)
}
y2(5, 5, 7)
fibonacci <- function(n){
if ((n == 1) | (n == 2)){
return (1)
} else {
return (fibonacci(n-2) + fibonacci(n-1))
}
}
fibonacci(10)
for(i in 1:10){
print(fibonacci(i))
}
# Fibonacci Number
#Return the n(th) value in sequence
fibonacci = function(n) {
if (n==1 | n==2) {
return(1)
} else {
return(fibonacci(n-2) + fibonacci(n-1))
}
}
fibonacci(20)
for (i in 1:20) {
print(fibonacci(i))
}
# HELP!
help(max)
?seq
help("seq")
args(dbinom)
## Package
install.packages("dplyr")
require(dplyr)
help(dplyr)
library(magrittr)
# 1
exp(log(3))
log(3)
exp(3)
e**3
exp(1)
exp(2)
(exp(1))**2
log(exp(3))
log2(e)
log2(3)
log10(3)
3 %>%
log %>%
exp
3 %>% log %>% exp
pi
# 2
sapply(-10:10, abs)
-10:10 %>%
sapply(abs)
-10：10 %>% abs
-10:10 %>% abs
-10:10 %>% lapply(abs)
-10:10 %>% lapply(abs)
jlkj
# 3
a = c(1, 4, 6, 8, 9, 30)
list(-10:10) %>% lapply(abs)
library(magrittr)
-10:10 %>%
sapply(abs)
list(-10:10) %>% lapply(abs)
(-10:10) %>% lapply(abs)
# 3
a = c(1, 4, 6, 8, 9, 30)
for (i in length(a)){
a[i] <- a[i]**2
}
a
for (i in length(a)){
a[i] <- a[i]**2
}
a
a = c(1, 4, 6, 8, 9, 30)
for (i in length(a)){
a[i] <- a[i]**2
}
a = c(1, 4, 6, 8, 9, 30)
for (i in 1:length(a)){
a[i] <- a[i]**2
}
a
a = c(1, 4, 6, 8, 9, 30)
a %<>% sapply( function(x){ x**2 } )
a
a = c(1, 4, 6, 8, 9, 30)
a %>% sapply(function(x) {x**2})
a
library(dplyr)
iris
summary(iris)
glimpse(iris)
library(dplyr)
iris
# filter()
head( filter(iris, Species == "setosa", Petal.Length > 1.4) )
# slice()
slice(iris, 1:7)
head(iris)
slice(iris, 7:5)
slice(iris, 3L)
3L
slice(iris, 3)
filter(iris, row_number() == 3)
filter(iris, colnames() == 'setosa')
slice(iris, n())
n()
help(slice)
tail(iris)
slice(iris, -3)
slice(iris, -5:-n())
head(iris)
class(3)
class(3L)
iris$Sepal.Length
arrange(iris, Sepal.Length)
arrange(iris, desc(Sepal.Length))
everything()
select(iris, everything())
select(iris, Sepal.Length, Sepal. Width)
select(iris, Sepal.Length, Sepal.Width)
iris[c('Sepal.Length', 'Sepal.Width')]
iris$c('Sepal.Length', 'Sepal.Width')
iris[c(Sepal.Length, Sepal.Width)]
iris$c(Sepal.Length, Sepal.Width)
select(iris, starts_with('Petal'))
filter(iris, c(Sepal.Length, Sepal.Width) > 1)
filter(iris, Sepal.Length > 1, Sepal.Width > 1)
head( select(iris, Species, everything()) )
head( select(iris, -Sepal.Length) )
# rename()
names(iris)
rename(iris, SL = Sepal.Length)
select(iris, SL = Sepal.Length)
select(iris, Sepal.Length)
# distinct()
select(iris, Species)
distinct(select(iris, Species))
# mutate()
head( mutate(iris, Petal = Petal.Length - Petal.Width) )
# create a new column Petal = Petal.Length - Petal.Width
head(mutate(iris, Sepal.Length = Sepal.Length*2))
iris$Sepal.Length * 2
iris$Sepal.Length = iris$Sepal.Length * 2
iris
iris
head(iris)
# transmute()
head( transmute(iris, Petal = Petal.Length - Petal.Width) )
# summarise()
summary(iris)
summarise(iris)
iris
summarise(iris)
summarise(iris, avg_petal_length = mean(Petal.Length, na.rm = TRUE))
mutate(iris, avg_PL = mean(Petal.Length, na.rm=TRUE))
# sample_n() / sample_frac()
sample_n(iris, 5)
150*0.05
sample_frac(iris, 0.05)
help("sample_n")
help("sample_frac")
iris %>%
select(-Species) %>%
summarise_all(funs(mean))
help("summarise_all")
help(func)
help('func')
func()
?func
??func
help("summarise_all")   # apply function to all columns
sqrt(2)
func(mean, abs, sqrt)
class(func(mean, abs, sqrt))
sapply(c(-5,-6,-8), mean)
mean(c(1,2,3))
mean(1,2,3)
sapply(c(-5,-6,-8), c(-4, -10, -2), mean)
sapply(c(c(-5,-6,-8), c(-4, -10, -2)), mean)
args(split)
split('Evan', '')
help(split)
args(strsplit)
strsplit('I am Evan', split=' ')
strsplit('I am Evan', split='')
name = 'I am Evan'
sapply(name, toupper)
sapply(name, toupper, USE.NAMES = FALSE)
sapply(name, strsplit, USE.NAMES = FALSE)
sapply(name, strsplit(split=' '), USE.NAMES = FALSE)
sapply(name, split, USE.NAMES = FALSE)
sapply(name, strsplit, split=' ', USE.NAMES = FALSE)
sapply(sapply(name, toupper, USE.NAMES = FALSE), strsplit, split=' ', USE.NAMES = FALSE)
my_split(x, split=' ') {}
my_split(x, split_by=' ') {strsplit(x, split=split_by)}
my_split = function(x, split_by=' ') {strsplit(x, split=split_by)}
my_split('I am Evan')
name %>% toupper %>% my_split()
sapply(name, func(toupper(), my_split()))
iris %>%
select(-Species) %>%
summarise_all(funs(mean))
tail(iris)
iris[150]
iris[row_number() == 150]
filter(iris, row_number()==150)
a_151 = c(5.9, 3.0, 5.1, 1.8, 'virginicalsdfasdg')
cat(iris, a_151)
cbind(iris, a_151)
args(cbind)
args(cbind, deparse.level=2)
args(cbind, deparse.level=0)
help(cbind)
rbind(iris, a_151)
a_151[5] = 'virginica'
a_151
rbind(iris, a_151)
iris_151 = rbind(iris, a_151)
rbind(iris, sapply(c(iris$Sepal.Length)))
rbind(iris, sapply(c(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
iris$Petal.Width), mean) )
# Pipe Operator
iris %>%
select(-Species) %>%
summarise_all(funs(mean))
help("summarise_all")   # apply function to all columns
iris %>%
select(Species, PL = Petal.Length) %>%
summarise(avg = mean(PL), sum = sum(PL))
require('ggplot2')
# 2.1 (10%)
# 利用 ggplot2 畫出內建資料集 airquality 中 Month 為 8 的資料
# Ozone 與 Temp 的 x-y 關係點圖
# 並把圖存到變數 gg1 中
gg1 <- airquality %>%
filter(Month == 8) %>%
ggplot(aes(Ozone, Temp)) + geom_point()
if(!require('rstudioapi')){
install.packages('rstudioapi')
require('rstudioapi')
}
require('dplyr')
gg1 <- airquality %>%
filter(Month == 8) %>%
ggplot(aes(Ozone, Temp)) + geom_point()
gg1
gg2 <- mtcars %>%
ggplot(aes(wt, mpg, color=cyl)) +
geom_point()
gg2
gg3 <- airquality %>%
group_by(Month) %>%
summarise(OzoneMean = mean(Ozone, na.rm=T)) %>%
ggplot(aes(Month, OzoneMean)) +
geom_bar(stat="identity")
gg3
# 2.4 (15%)
# (請依照 0.0 0.1 提示或手動將 .R 檔案當前位置設為 working directory)
# 讀取 "106_student.csv" 檔，存到變數 student 中
# 這份 csv 是 106 學年度全台各地大學專院校的學生人數
# 請先把「等級別」為 "B 學士"、「日間.進修別」為 "D 日" 的資料篩選出來
# 再畫出臺北市大學與非臺北市大學的一年級人數總數的長條圖
# x 軸為是否位於臺北市，y 軸為一年級學生總數 (記得要把男女加起來)
# 並把圖存到變數 gg4 中
student <- read.csv('106_student.csv', sep=",", encoding='utf8')
setwd("~/GitHub/1a 使用R語言進行資料分析/助教課 week5")
# 2.4 (15%)
# (請依照 0.0 0.1 提示或手動將 .R 檔案當前位置設為 working directory)
# 讀取 "106_student.csv" 檔，存到變數 student 中
# 這份 csv 是 106 學年度全台各地大學專院校的學生人數
# 請先把「等級別」為 "B 學士"、「日間.進修別」為 "D 日" 的資料篩選出來
# 再畫出臺北市大學與非臺北市大學的一年級人數總數的長條圖
# x 軸為是否位於臺北市，y 軸為一年級學生總數 (記得要把男女加起來)
# 並把圖存到變數 gg4 中
student <- read.csv('106_student.csv', sep=",", encoding='utf8')
student
view(student)
