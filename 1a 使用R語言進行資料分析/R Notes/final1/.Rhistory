calc_GPA <- function(credit, each_gpa) {
gpa = sum(credits * each_GPA)/sum(credits)
return(gpa)
}
calc_GPA(credits, each_GPA)
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
match('Calculus', subjects)
match('Python', subjects)
credits
credit[-3]
credits[-3]
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, levels = c('D','C','B','A'), ordered = TRUE)
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
#GPA <- mean(credits * each_GPA)
GPA = sum(credits * each_GPA)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credit, each_gpa) {
gpa = sum(credits * each_GPA)/sum(credits)
return(gpa)
}
calc_GPA(credits, each_GPA)
# 1.5 (10%)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw
# 輸入是某個科目(ex: "which_to_withdraw("Calculus")")
# 輸出是停修該科後的加權 GPA
which_to_withdraw <- function(subject_name, df=ming1) {
removed_df = subset(df, subset = df$subjects != subject_name)
removed_gpa = sum(removed_df$each_GPA * removed_df$credits)/sum(removed_df$credits)
return(removed_gpa)
}
which_to_withdraw('English')
ming1
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_subs = subjects[-index]
removed_credits = credits[-index]
return(sum(removed_subs * removed_credits)/sum(removed_credits))
}
which_to_withdraw('English')
ming1
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_gpa = each_GPA[-index]
removed_credits = credits[-index]
return(calc_GPA(removed_credits, removed_gpa))
}
which_to_withdraw('English')
which_to_withdraw <- function(subject){
index <- match(subject, subjects) #return the index of subject
return (calc_GPA( credits[-index], each_GPA[-index] ))
}
which_to_withdraw('English')
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_gpa = each_GPA[-index]
removed_credits = credits[-index]
return(calc_GPA(removed_credits, removed_gpa))
}
which_to_withdraw('English')
# 1.6 (5%)
# 在 ming 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
ming2 <- ming1
ming2$if_withdraw = sapply(subjects, which_to_withdraw)
ming2
ming1
#### 注意事項 ####
# 1. 變數名稱請勿改動，若造成判斷錯誤一蓋不負責。
# 2. 請不要用 rm(list=ls()) 之類的東西，我們的 judge 會壞掉。
# 3. ggplot2 的 ggplot() 會回傳東西，第二大題的所有答案都請存到變數中
# ex: gg_exam <- ggplot(data=..., aes(...)) + ...
# 4. 提交答案之前請再次檢查變數存的東西是否符合題目要求。
# 5. 答案只有三種結果: correct, wrong, lost
# 分別是答對、答錯、未答，沒有對一半、部份給分。
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, levels = c('D','C','B','A'), ordered = TRUE)
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
#GPA <- mean(credits * each_GPA)
GPA = sum(credits * each_GPA)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credit, each_gpa) {
gpa = sum(credits * each_GPA)/sum(credits)
return(gpa)
}
calc_GPA(credits, each_GPA)
# 1.5 (10%)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw
# 輸入是某個科目(ex: "which_to_withdraw("Calculus")")
# 輸出是停修該科後的加權 GPA
which_to_withdraw <- function(subject_name, df=ming1) {
removed_df = subset(df, subset = df$subjects != subject_name)
removed_gpa = sum(removed_df$each_GPA * removed_df$credits)/sum(removed_df$credits)
return(removed_gpa)
}
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_gpa = each_GPA[-index]
removed_credits = credits[-index]
return(calc_GPA(removed_credits, removed_gpa))
}
which_to_withdraw('English')
# 1.6 (5%)
# 在 ming 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
ming2 <- ming1
ming2$if_withdraw = sapply(subjects, which_to_withdraw)
ming2
# 1.6 (5%)
# 在 ming 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
ming2 <- ming1
ming2$if_withdraw = sapply(ming1$Subject, which_to_withdraw)
ming2
library(magrittr)
library(dplyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, order=T, levels = c("D", "C", "B", "A"))
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
GPA <- sum(each_GPA * credits)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credits, each_GPA){
return (sum(each_GPA * credits)/sum(credits))
}
calc_GPA(credits, each_GPA)
# 1.5 (10%)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw ，
# 輸入是科目(ex: "which_to_withdraw("Calculus")")
which_to_withdraw <- function(subject){
index <- match(subject, subjects) #return the index of subject
return (calc_GPA( credits[-index], each_GPA[-index] ))
}
which_to_withdraw('English')
sapply(subjects, which_to_withdraw)
# 1.6 (5%)
# 在 ming1 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
ming2 <- mutate(ming1, if_withdraw = sapply(ming1$Subject, which_to_withdraw))
ming2
#### 注意事項 ####
# 1. 變數名稱請勿改動，若造成判斷錯誤一蓋不負責。
# 2. 請不要用 rm(list=ls()) 之類的東西，我們的 judge 會壞掉。
# 3. ggplot2 的 ggplot() 會回傳東西，第二大題的所有答案都請存到變數中
# ex: gg_exam <- ggplot(data=..., aes(...)) + ...
# 4. 提交答案之前請再次檢查變數存的東西是否符合題目要求。
# 5. 答案只有三種結果: correct, wrong, lost
# 分別是答對、答錯、未答，沒有對一半、部份給分。
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, levels = c('D','C','B','A'), ordered = TRUE)
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
#GPA <- mean(credits * each_GPA)
GPA = sum(credits * each_GPA)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credit, each_gpa) {
gpa = sum(credits * each_GPA)/sum(credits)
return(gpa)
}
calc_GPA(credits, each_GPA)
# 1.5 (10%)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw
# 輸入是某個科目(ex: "which_to_withdraw("Calculus")")
# 輸出是停修該科後的加權 GPA
#which_to_withdraw <- function(subject_name, df=ming1) {
#    removed_df = subset(df, subset = df$subjects != subject_name)
#    removed_gpa = sum(removed_df$each_GPA * removed_df$credits)/sum(removed_df$credits)
#    return(removed_gpa)
#}
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_gpa = each_GPA[-index]
removed_credits = credits[-index]
return(calc_GPA(removed_credits, removed_gpa))
}
which_to_withdraw('English')
# 1.6 (5%)
# 在 ming 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
#ming2 <- ming1
#ming2$if_withdraw = sapply(ming1$Subject, which_to_withdraw)
ming2 = mutate(ming1, if_withdraw = sapply(ming1$Subject, which_to_withdraw))
ming2
ming1
library(magrittr)
library(dplyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, order=T, levels = c("D", "C", "B", "A"))
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
GPA <- sum(each_GPA * credits)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credits, each_GPA){
return (sum(each_GPA * credits)/sum(credits))
}
calc_GPA(credits, each_GPA)
# 1.5 (10%)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw ，
# 輸入是科目(ex: "which_to_withdraw("Calculus")")
which_to_withdraw <- function(subject){
index <- match(subject, subjects) #return the index of subject
return (calc_GPA( credits[-index], each_GPA[-index] ))
}
which_to_withdraw('English')
sapply(subjects, which_to_withdraw)
# 1.6 (5%)
# 在 ming1 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
ming2 <- mutate(ming1, if_withdraw = sapply(ming1$Subject, which_to_withdraw))
ming2
# 1.7 (5%)
# 小明要出發回到過去了，他應該停修哪一科？
# 本題不能直接寫答案，應寫出運算過程(就是不能用肉眼判斷)
withdrawal <- subjects[ ming2$if_withdraw == max(ming2$if_withdraw) ]
withdrawal
subjects
#### 注意事項 ####
# 1. 變數名稱請勿改動，若造成判斷錯誤一蓋不負責。
# 2. 請不要用 rm(list=ls()) 之類的東西，我們的 judge 會壞掉。
# 3. ggplot2 的 ggplot() 會回傳東西，第二大題的所有答案都請存到變數中
# ex: gg_exam <- ggplot(data=..., aes(...)) + ...
# 4. 提交答案之前請再次檢查變數存的東西是否符合題目要求。
# 5. 答案只有三種結果: correct, wrong, lost
# 分別是答對、答錯、未答，沒有對一半、部份給分。
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, levels = c('D','C','B','A'), ordered = TRUE)
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
#GPA <- mean(credits * each_GPA)
GPA = sum(credits * each_GPA)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credit, each_gpa) {
gpa = sum(credits * each_GPA)/sum(credits)
return(gpa)
}
calc_GPA(credits, each_GPA)
library(magrittr)
library(dplyr)
library(ggplot2)
####  1  ####
## 以下是小明各科的學期成績
subjects <- c("Calculus", "Python", "R", "Chinese",
"Algebra", "Physics", "Tennis", "English")
credits <- c(5, 2, 1, 3, 4, 4, 2, 3)
scores <- c("A", "B", "A", "C", "B", "D", "C", "C")
each_GPA <- c(4, 3, 4, 2, 3, 1, 2, 2)
# 1.1 (5%)
# 把 scores 轉換成類別變數 (factor) 存在 score_factor
# 並賦予其順序屬性 D<C<B<A
score_factor <- factor(scores, order=T, levels = c("D", "C", "B", "A"))
score_factor
# 1.2 (5%)
# 把四筆資料做成一個 dataframe 存到變數 ming1 中
# column names 分別是 Subject, Credit, Score, GPA
ming1 <- data.frame(Subject=subjects, Credit=credits, Score=scores, GPA=each_GPA)
ming1
# 1.3 (5%)
# 計算小明這學期的加權 GPA 並存到變數 GPA 中
# hint: 加權GPA = (該科GPA * 該科學分數)的平均
GPA <- sum(each_GPA * credits)/sum(credits)
GPA
# 1.4 (5%)
# 把上一題改寫成函數 calc_GPA ，輸入是學分與分別的GPA
calc_GPA <- function(credits, each_GPA){
return (sum(each_GPA * credits)/sum(credits))
}
calc_GPA(credits, each_GPA)
# 小明看到成績單之後發明了時光機，想回到停修截止日前停修某科
# 好讓自己的成績好看點，但是他不知道停修哪科會讓 GPA 變高最多
# 請幫他寫一個函數 which_to_withdraw
# 輸入是某個科目(ex: "which_to_withdraw("Calculus")")
# 輸出是停修該科後的加權 GPA
#which_to_withdraw <- function(subject_name, df=ming1) {
#    removed_df = subset(df, subset = df$subjects != subject_name)
#    removed_gpa = sum(removed_df$each_GPA * removed_df$credits)/sum(removed_df$credits)
#    return(removed_gpa)
#}
which_to_withdraw = function(subject) {
index = match(subject, subjects)
removed_gpa = each_GPA[-index]
removed_credits = credits[-index]
return(calc_GPA(removed_credits, removed_gpa))
}
which_to_withdraw('English')
# 1.6 (5%)
# 在 ming 多新增一欄 "if_withdraw" 並存到變數 ming2
# 值為「若捨棄該科，GPA會變成多少」
# 注意：請不要變動 ming1
#ming2 <- ming1
#ming2$if_withdraw = sapply(ming1$Subject, which_to_withdraw)
ming2 = mutate(ming1, if_withdraw = sapply(ming1$Subject, which_to_withdraw))
ming2
w = ming2[which.max(ming2$if_withdraw), ]
w = subset(ming2, subset = ming2$if_withdraw==max(ming2$if_withdraw))
w$subjects
withdrawal <- w$subjects
withdrawal
# 1.7 (5%)
# 小明要出發回到過去了，他應該停修哪一科？存到變數 withdrawal 中
# 本題不能直接寫答案，應寫出運算過程 (即不能用肉眼判斷)
#w = ming2[which.max(ming2$if_withdraw), ]
#w = subset(ming2, subset = ming2$if_withdraw==max(ming2$if_withdraw))
#w$subjects
#withdrawal <- w$subjects
#withdrawal
withdrawal = subject[ming2$if_withdraw == max(ming2$if_withdraw)]
withdrawal
# 1.7 (5%)
# 小明要出發回到過去了，他應該停修哪一科？存到變數 withdrawal 中
# 本題不能直接寫答案，應寫出運算過程 (即不能用肉眼判斷)
#w = ming2[which.max(ming2$if_withdraw), ]
#w = subset(ming2, subset = ming2$if_withdraw==max(ming2$if_withdraw))
#w$subjects
#withdrawal <- w$subjects
#withdrawal
withdrawal = subjects[ming2$if_withdraw == max(ming2$if_withdraw)]
withdrawal
withdrawal_machine <- function(subjects, credits, scores, each_GPA) {
df <- data.frame(subjects, credits, scores, each_GPA)
df$if_withdraw = sapply(subjects, which_to_withdraw)
withdrawal = subset(df, subset = df$if_withdraw==max(df$if_withdraw))$subjects
return(withdrawal)
}
withdrawal_machine(subjects, credits, scores, each_GPA)
# 1.7 (5%)
# 小明要出發回到過去了，他應該停修哪一科？存到變數 withdrawal 中
# 本題不能直接寫答案，應寫出運算過程 (即不能用肉眼判斷)
#w = ming2[which.max(ming2$if_withdraw), ]
#w = subset(ming2, subset = ming2$if_withdraw==max(ming2$if_withdraw))
#w$subjects
#withdrawal <- w$subjects
#withdrawal
withdrawal = ming2$subjects[ming2$if_withdraw == max(ming2$if_withdraw)]
withdrawal
# 1.7 (5%)
# 小明要出發回到過去了，他應該停修哪一科？存到變數 withdrawal 中
# 本題不能直接寫答案，應寫出運算過程 (即不能用肉眼判斷)
#w = ming2[which.max(ming2$if_withdraw), ]
#w = subset(ming2, subset = ming2$if_withdraw==max(ming2$if_withdraw))
#w$subjects
#withdrawal <- w$subjects
#withdrawal
withdrawal = subjects[ming2$if_withdraw == max(ming2$if_withdraw)]
withdrawal
gg1 <- iris %>%
filter(Species == "setosa") %>%
ggplot(aes(x = Sepal.Length, y = Petal.Length)) +
geom_point()
gg1
gg2 <- iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point()
gg2
gg3 <- diamonds %>%
sample_frac(0.05) %>%
ggplot(aes(carat, price)) +
geom_point() + geom_smooth()
gg3
gg3 <- diamonds %>%
sample_frac(0.05) %>%
ggplot(aes(x=carat, y=price)) +
geom_point() +
geom_quantile()
gg3
